@startuml

package CoreData {

    interface Core<T> {
        +process(service, request, callback)

        +loadActivity(activity)
        +unloadActivity(activity)

        +loadService(service)
        +unloadService(service)
    }

    interface GraphicsContext<N> {
        +bind(rootNode)
        +unbind(rootNode)
    }

    interface ApplicationContext {
        +getDocumentsDAO(): DataAccessObject<Document>
        +getUsersDAO(): DataAccessObject<User>
    }

    interface Activity<N> {
        +onLoad(graphicContext)
        +onUnload(graphicContext)
    }

    interface Service<A, R> {
        +onLoad(core)
        +onUnload(core)
    }

    interface PureService<A, R> {
        +process(request, callback)
    }

    interface DataService<A, R> {
        +process(request, callback, dataContext)
    }

}

package Utils {

    package Data {

        class DataAccessObject<T> {
            +beginTransaction(): Transaction<T>
        }

        class Transaction<T> {
            +getAll(): Stream<T>
            +save(T object): void
            +update(T object): void
            +delete(T object): void
        }

    }
}

package Model {

    class Document {

    }

    class User {

    }

}

Core --> Activity
Core --> Service
Activity --> GraphicsContext
Service --> ApplicationContext
ApplicationContext --> DataAccessObject
ApplicationContext --> User
ApplicationContext --> Document
DataAccessObject --> Transaction

@enduml